#rules: 
#	all(builds your executable)
#	clean(deletes all Emacs and Vim temporary files along with the executable)
#	oclean(deletes the object files)
#	fclean(deletes all Emacs and Vim temporary files, the executable, and the object files)
#	re(forces recompilation of all source files)
#Variables: CC, SRC, OBJ, NAME, RM
#	CC: the compiler to be used
#	SRC: the .c files
#	OBJ: the .o files
#	NAME: the name of the executable
#	RM: the program to delete files
#You have to use $(RM) for the cleaning up rules, but you are not allowed to set the RM variable
#You are not allowed to use the string $(CC) more than once in your Makefile
#You are only allowed to use the string $(RM) twice in your Makefile
#You are not allowed to use the string $(CFLAGS) (but the compiler should still use the flags you set in this variable)
#You are not allowed to have an $(OBJ) rule
#You are not allowed to use the %.o: %.c rule
#Your Makefile should work even if there is a file in the folder that has the same name as one of your rule
#Your Makefile should not compile if the header file m.h is missing

CC = gcc
SRC = main.c school.c
OBJ = $(SRC:.c=.o)
NAME = school
CFLAGS = -Wall -Werror -Wextra -pedantic
.PHONY: all clean oclean fclean re

all: $(OBJ) m.h
	$(CC) $(OBJ) -o $(NAME)

clean:
	$(RM) *~ $(NAME)

oclean:
	$(RM) $(OBJ)

fclean: clean oclean

re: oclean all

